//(1)
plugins {
    id 'org.springframework.boot' version "2.2.6.RELEASE"
    id 'nu.studer.jooq' version '4.1'
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

group 'com._98elements'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_14

tasks.withType(JavaCompile) {
    options.compilerArgs += '--enable-preview'
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

repositories {
    mavenCentral()
}

//(2)
dependencies {
    // Postgres
    implementation 'org.postgresql:postgresql'

    // JOOQ
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    jooqRuntime 'org.postgresql:postgresql'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

//(3)
jooq {
    demo(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/postgres'
            user = 'postgres'
            password = 'password'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                includes = 'public.*'
            }
            generate {
                records = true
                fluentSetters = true
            }
            target {
                packageName = 'com._98elements.jooq.demo.persistence'
                directory = 'src/main/jooq'
            }
        }
    }
}

sourceSets.main.java.srcDirs += "${projectDir}/src/main/jooq"
clean.doFirst {
    delete "${projectDir}/src/main/jooq"
}

//(4)
compileJava.dependsOn generateDemoJooqSchemaSource
